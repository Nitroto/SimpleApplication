version: "3.9"
services:
  backend:
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile.backend
    depends_on:
      - postgres
    links:
      - postgres
    environment:
      DATABASE_URL: postgres://postgres:lypTFy3pNR@postgres:5432/simple_db
      NODE_ENV: production
      PORT: 4000
      TOKEN_SECRET: DzPNsBoaL1EKhngLdweTC1k2IYxBqnWX
      SALT_ROUNDS: 5
      BCRYPT_PASSWORD: mdn6mmKISFhoGhi5tmZUUv9onbtryTKr
      DB_HOST: postgres
    ports:
      - "4000:4000"
    command: bash -c "./wait-for-it/wait-for-it.sh postgres:5432 -- npm run migrate up && npm start"
    restart: on-failure
    networks:
      - app-network
  frontend:
    container_name: frontend
    build:
      context: .
      dockerfile: Dockerfile.frontend
    depends_on:
      - backend
    ports:
      - "80:80"
    networks:
      - app-network
  postgres:
    container_name: postgres
    image: postgres:15.1-alpine
    ports:
      - "5432:5432"
    volumes:
      - ./pg_data:/var/lib/postgresql/data
      - ./schema.sql:/docker-entrypoint-initdb.d/schema.sql
    restart: always
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: lypTFy3pNR
      POSTGRES_DB: simple_db
      PGDATA: pg_data
    networks:
      - app-network
  pgadmin:
    container_name: pgadmin
    image: dpage/pgadmin4:6.19
    restart: always
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@postgres.com
      PGADMIN_DEFAULT_PASSWORD: secret
      PGADMIN_LISTEN_PORT: 5050
    ports:
      - "5050:5050"
    volumes:
      - pgadmin-data:/var/lib/pgadmin
    depends_on:
      - postgres
    networks:
      - app-network
volumes:
  pg_data:
  pgadmin-data:
networks:
  app-network:
